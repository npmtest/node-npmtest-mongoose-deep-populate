{"/home/travis/build/npmtest/node-npmtest-mongoose-deep-populate/test.js":"/* istanbul instrument in package npmtest_mongoose_deep_populate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoose-deep-populate/lib.npmtest_mongoose_deep_populate.js":"/* istanbul instrument in package npmtest_mongoose_deep_populate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongoose_deep_populate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongoose_deep_populate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoose-deep-populate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongoose-deep-populate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongoose_deep_populate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongoose_deep_populate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongoose_deep_populate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongoose_deep_populate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongoose_deep_populate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongoose_deep_populate.__dirname + '/lib.npmtest_mongoose_deep_populate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoose-deep-populate/node_modules/mongoose-deep-populate/index.js":"module.exports = require('./lib/plugin.js')\n","/home/travis/build/npmtest/node-npmtest-mongoose-deep-populate/node_modules/mongoose-deep-populate/lib/plugin.js":"module.exports = function (mongoose) {\n  if (mongoose == null) {\n    throw new Error('An instance of mongoose needs passing in')\n  }\n\n  patchQueryPrototype()\n  return deepPopulatePlugin\n\n\n  /**\n   * Patches Query prototype to add `deepPopulate()` method.\n   */\n  function patchQueryPrototype() {\n    var Query = mongoose.Query\n      , _exec = Query.prototype.exec\n\n    if (mongoose.Query.prototype.deepPopulate != null) {\n      return\n    }\n\n    /**\n     * Registers deep population on this query.\n     * @param paths the paths to be populated.\n     * @param options (optional) the population options.\n     * @remark this method can only be invoked once per query.\n     * @return {Query}\n     */\n    Query.prototype.deepPopulate = function (paths, options) {\n      if (this.model.schema.methods.deepPopulate == null) {\n        throw new Error('Plugin was not installed')\n      }\n\n      if (this._deepPopulates) {\n        throw new Error('deepPopulate was already invoked')\n      }\n\n      this._deepPopulates = {paths: paths, options: options}\n      return this\n    }\n\n    /**\n     * Monkey-patches `exec` to add deep population hook.\n     * @param op the operation to be executed.\n     * @param cb the callback.\n     * @return {MongoosePromise}\n     */\n    Query.prototype.exec = function (op, cb) {\n      var deepPopulate = this._deepPopulates\n      if (!deepPopulate) {\n        return _exec.call(this, op, cb)\n      }\n\n      var model = this.model\n        , paths = deepPopulate.paths\n        , options = deepPopulate.options\n        , defaultOptions = model.schema._defaultDeepPopulateOptions\n        , lean = this._mongooseOptions.lean\n\n      if (isFunction(op)) {\n        cb = op\n        op = null\n      }\n      else {\n        cb = cb || noop\n      }\n\n      return createMongoosePromise(function (resolve, reject) {\n        _exec.call(this, op, function (err, docs) {\n          if (err) {\n            return reject(err), cb(err)\n          }\n\n          if (!docs) {\n            return resolve(docs), cb(null, docs)\n          }\n\n          execute(model, docs, paths, options, defaultOptions, lean, function (err, docs) {\n            if (err) reject(err), cb(err)\n            else resolve(docs), cb(null, docs)\n          })\n        })\n      }.bind(this))\n    }\n  }\n\n  /**\n   * Creates a Mongoose promise.\n   */\n  function createMongoosePromise(resolver) {\n    var promise\n\n    // mongoose 4.1.x and up\n    if (mongoose.Promise.ES6) {\n      promise = new mongoose.Promise.ES6(resolver)\n    }\n    // backward compatibility\n    else {\n      promise = new mongoose.Promise\n      resolver(promise.resolve.bind(promise, null), promise.reject.bind(promise))\n    }\n\n    return promise\n  }\n\n  /**\n   * Invoked by Mongoose to executes the plugin on the specified schema.\n   */\n  function deepPopulatePlugin(schema, defaultOptions) {\n    schema._defaultDeepPopulateOptions = defaultOptions = defaultOptions || {}\n\n    /**\n     * Populates this document with the specified paths.\n     * @param paths the paths to be populated.\n     * @param options (optional) the population options.\n     * @param cb (optional) the callback.\n     * @return {MongoosePromise}\n     */\n    schema.methods.deepPopulate = function (paths, options, cb) {\n      return deepPopulate(this.constructor, this, paths, options, cb)\n    }\n\n    /**\n     * Populates provided documents with the specified paths.\n     * @param docs the documents to be populated.\n     * @param paths the paths to be populated.\n     * @param options (optional) the population options.\n     * @param cb (optional) the callback.\n     * @return {MongoosePromise}\n     */\n    schema.statics.deepPopulate = function (docs, paths, options, cb) {\n      return deepPopulate(this, docs, paths, options, cb)\n    }\n\n    function deepPopulate(model, docs, paths, options, cb) {\n      if (isFunction(options)) {\n        cb = options\n        options = null\n      }\n      else {\n        cb = cb || noop\n      }\n\n      return createMongoosePromise(function (resolve, reject) {\n        if (docs == null || docs.length === 0) {\n          return resolve(docs), cb(null, docs)\n        }\n\n        execute(model, docs, paths, options, defaultOptions, false, function (err, docs) {\n          if (err) reject(err), cb(err)\n          else resolve(docs), cb(null, docs)\n        })\n      })\n    }\n  }\n\n  function execute(model, docs, paths, options, defaultOptions, lean, cb) {\n    var params = createParams(model, docs, paths, extend({}, defaultOptions, options), lean)\n\n    if (params.paths.length === 0) cb(null, docs)\n    else populate(params, 0, cb)\n  }\n\n  function createParams(model, docs, paths, options, lean) {\n    var rewrite = options.rewrite\n      , whitelist = options.whitelist\n      , populate = options.populate\n\n    paths = isArray(paths) ? paths : (paths || '').split(/[\\s,]+/) // space or comma delimited\n    paths = normalize(paths)\n\n    // rewrites paths, whitelist and populate\n    if (rewrite) {\n      paths = paths.map(function (path) { return rewrite[path] || path })\n\n      if (whitelist) {\n        whitelist = whitelist.map(function (path) { return rewrite[path] || path })\n      }\n\n      if (populate) {\n        Object.keys(populate).forEach(function (path) {\n          var rewrittenPath = rewrite[path] || path\n          if (rewrittenPath) populate[rewrittenPath] = populate[path]\n        })\n      }\n    }\n\n    // deconstructs then filters paths using whitelist\n    paths = normalize(deconstruct(paths))\n    if (whitelist) {\n      whitelist = normalize(deconstruct(whitelist))\n      paths = paths.filter(function (path) { return ~whitelist.indexOf(path) })\n    }\n\n    // computes max subpaths, i.e. levels\n    var maxNoOfSubpaths = -1\n    paths.forEach(function (path) {\n      var noOfSubpaths = path.split('.').length\n      if (noOfSubpaths > maxNoOfSubpaths) maxNoOfSubpaths = noOfSubpaths\n    })\n\n    var db = model.db\n    if (!db) {\n      var doc = isArray(docs) ? docs[0] : docs\n      if (doc && doc.ownerDocument) db = doc.ownerDocument().constructor.db\n      else throw new Error('Cannot retrieve database instance')\n    }\n\n    return {\n      db: db,\n      model: model,\n      docs: docs,\n      paths: paths,\n      lean: lean,\n      max: maxNoOfSubpaths - 1,\n      options: populate || {}\n    }\n  }\n\n  function populate(opts, level, cb) {\n    var docs = opts.docs\n      , paths = opts.paths\n      , lvlPaths = paths.filter(function (path) { return (path.split('.').length - 1) === level })\n      , remained = lvlPaths.length\n      , model, path, populateOpts\n\n    while (path = lvlPaths.shift()) {\n      model = getModelFromPath(opts.db, opts.model, path)\n\n      if (model != null) {\n        populateOpts = extend({}, opts.options[path], {path: path, model: model.modelName})\n\n        if (opts.lean) {\n          populateOpts.options = extend({lean: true}, populateOpts.options)\n        }\n\n        model.populate(docs, populateOpts, one)\n      }\n      else one()\n    }\n\n    function one(err) {\n      if (err) return nextLevel(err)\n      if (--remained === 0) nextLevel()\n    }\n\n    function nextLevel(err) {\n      if (err) return cb(err)\n      if (level === opts.max) return cb(null, docs)\n      populate(opts, ++level, cb)\n    }\n  }\n\n  function getModelFromPath(db, model, path) {\n    var schema = model.schema\n      , currentPath = null\n      , candidateModel = null\n\n    path.split('.').forEach(function (subpath) {\n      currentPath = (currentPath ? (currentPath + '.') : '') + subpath\n      var schemaPath = schema.paths[currentPath]\n\n      // no schema, possibly a subdocument, continues to find out\n      if (!schemaPath) {\n        candidateModel = null\n        return\n      }\n\n      // found a schema, resets current path\n      currentPath = null\n\n      // dereferences if linked documents\n      if (schemaPath.caster && schemaPath.caster.options) {\n        schemaPath = schemaPath.caster\n      }\n\n      // if linked document(s), extract model and schema\n      if (schemaPath.options && schemaPath.options.ref) {\n        candidateModel = db.model(schemaPath.options.ref)\n        schema = candidateModel.schema\n      }\n\n      // else, subdocuments => no model but has schema\n      else {\n        candidateModel = null\n        schema = schemaPath.schema\n      }\n    })\n\n    return candidateModel\n  }\n\n  // Breaks ['a.b.c', ...] to ['a', 'a.b', 'a.b.c', ...]\n  function deconstruct(paths) {\n    var _paths = []\n\n    paths.forEach(function (path) {\n      var currentPath = null\n      path.split('.').forEach(function (subpath) {\n        currentPath = (currentPath ? (currentPath + '.') : '') + subpath.trim()\n        _paths.push(currentPath)\n      })\n    })\n\n    return _paths\n  }\n\n  function normalize(paths) {\n    return paths\n      .map(function (path) { return path.trim() })\n      .filter(function (path) { return path !== '' })\n      .filter(function (path, index, self) { return self.indexOf(path) === index }) // removes duplicates\n  }\n\n  function extend(target) {\n    var src\n    for (var i = 1, l = arguments.length; i < l; i++) {\n      src = arguments[i]\n      for (var k in src) target[k] = src[k]\n    }\n    return target\n  }\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]'\n  }\n\n  function isFunction(obj) {\n    return Object.prototype.toString.call(obj) === '[object Function]'\n  }\n\n  function noop() {}\n}\n","/home/travis/build/npmtest/node-npmtest-mongoose-deep-populate/node_modules/mongoose-deep-populate/gulpfile.js":"var gulp      = require('gulp')\n  , mongoose  = require('mongoose')\n  , $         = require('gulp-load-plugins')()\n  , parseArgs = require('minimist')\n\ngulp.task('default', ['test', 'jshint'])\n\ngulp.task('test', ['dropdb'], function () {\n  return gulp.src('./test/**/*.js')\n             .pipe($.mocha({reporter: 'spec'}))\n             .pipe($.exit())\n})\n\ngulp.task('dropdb', function (cb) {\n  var dbUrl = process.env.TEST_DB = parseArgs(process.argv)['db']\n  if (!dbUrl) return cb(new Error('Connection string must be specified via --db'));\n  mongoose.connect(dbUrl, function (err) {\n    if (err) return cb(err)\n    mongoose.connection.db.dropDatabase(function (err) {\n      if (err) return cb(err)\n      mongoose.disconnect(cb)\n    })\n  })\n})\n\ngulp.task('jshint', function () {\n  return gulp.src('./lib/**/*.js')\n             .pipe($.jshint())\n             .pipe($.jshint.reporter('jshint-stylish'))\n})\n"}